[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f1d8e85811ac5a02",
        "type": "MySQLdatabase",
        "name": "monitoring",
        "host": "192.168.1.15",
        "port": "3306",
        "db": "machine_monitoring",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "1bd7423398381ce9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.15",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "fa2e4e15793cf74c",
        "type": "mysql",
        "z": "f6f2187d.f17ca8",
        "mydb": "f1d8e85811ac5a02",
        "name": "Monitoring",
        "x": 830,
        "y": 380,
        "wires": [
            [
                "0db50342e41d0ef6"
            ]
        ]
    },
    {
        "id": "0db50342e41d0ef6",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 380,
        "wires": []
    },
    {
        "id": "8ab0f12f28667467",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "A1",
        "topic": "machine/cycle_time",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "1bd7423398381ce9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 380,
        "wires": [
            [
                "d0e366ad5eebbd0e",
                "32ba58dc7f188f9d"
            ]
        ]
    },
    {
        "id": "d0e366ad5eebbd0e",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "MQTT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 460,
        "wires": []
    },
    {
        "id": "5d3b2860df5a3c96",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Upload SQL",
        "func": "// Extract the state from the payload\nconst elapsed_time = msg.payload.elapsed_time_ms;\nconst machineid = msg.payload.machineid; // Assuming this is a string\nconst action = msg.payload.action; // Assuming this is a string\nconst mould_id = msg.payload.mould_id;\nconst jobid = msg.payload.jobid;\n\n\n// Generate the current timestamp in SQL-compatible format (YYYY-MM-DD HH:MM:SS)\nconst now = new Date();\nconst time_input = now.getFullYear() + \"-\" +\n                   String(now.getMonth() + 1).padStart(2, '0') + \"-\" +\n                   String(now.getDate()).padStart(2, '0') + \" \" +\n                   String(now.getHours()).padStart(2, '0') + \":\" +\n                   String(now.getMinutes()).padStart(2, '0') + \":\" +\n                   String(now.getSeconds()).padStart(2, '0');\n\n// Construct the SQL INSERT query\nmsg.topic = \"INSERT INTO monitoring (jobid, machineid, mould_id, action, time_taken, time_input) VALUES ('\" \n            + jobid + \"', '\"\n            + machineid + \"', '\" \n            + mould_id + \"', '\" \n            + action + \"', \"\n            + elapsed_time + \", '\"\n            + time_input + \"');\";\n\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "32ba58dc7f188f9d",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Upload SQL New",
        "func": "// Extract common fields from the payload\nconst messageAction = msg.payload.action; // Add a 'type' field to your payload to distinguish message types\nconst now = new Date();\nconst time_input = now.getFullYear() + \"-\" +\n    String(now.getMonth() + 1).padStart(2, '0') + \"-\" +\n    String(now.getDate()).padStart(2, '0') + \" \" +\n    String(now.getHours()).padStart(2, '0') + \":\" +\n    String(now.getMinutes()).padStart(2, '0') + \":\" +\n    String(now.getSeconds()).padStart(2, '0');\n\nif (messageAction === \"up mould\") {\n    // Extract the state from the payload\n    const elapsed_time = msg.payload.elapsed_time_ms;\n    const main_id = msg.payload.main_id;\n\n\n    // Construct the SQL INSERT query\n    msg.topic = \"INSERT INTO monitoring (main_id, action, time_taken, time_input) VALUES ('\"\n        + main_id + \"', '\"\n        // + machineid + \"', \"\n        // + (mould_id === \"NULL\" ? mould_id : `'${mould_id}'`) + \", '\"\n        + messageAction + \"', \"\n        + elapsed_time + \", '\"\n        + time_input + \"');\";\n}\n\nif (messageAction === \"adjustment/QA-QC\") {\n    // Extract the state from the payload\n    const elapsed_time = msg.payload.elapsed_time_ms;\n    const main_id = msg.payload.main_id;\n\n\n    // Construct the SQL INSERT query\n    msg.topic = \"INSERT INTO monitoring (main_id, action, time_taken, time_input) VALUES ('\"\n        + main_id + \"', '\"\n        + messageAction + \"', \"\n        + elapsed_time + \", '\"\n        + time_input + \"');\";\n}\n\n\nif (messageAction === \"down mould\") {\n    // Extract the state from the payload\n    const elapsed_time = msg.payload.elapsed_time_ms;\n    const main_id = msg.payload.main_id;\n\n\n    // Construct the SQL INSERT query\n    msg.topic = \"INSERT INTO monitoring (main_id, action, time_taken, time_input) VALUES ('\"\n        + main_id + \"', '\"\n        + messageAction + \"', \"\n        + elapsed_time + \", '\"\n        + time_input + \"');\";\n}\n\n\n\n// so i think when up mould start, insert a new row, start timer, until up mould end end timer and insert into query table\n// submit into the monitoring table \n\nif (messageAction === \"normal_cycle\"){    // Extract the state from the payload\n    const elapsed_time = msg.payload.elapsed_time_ms;\n    const action = msg.payload.action; // Assuming this is a string\n    const mp_id = msg.payload.mp_id;\n    const main_id = msg.payload.main_id;\n    \n    // Construct the SQL INSERT query\n    msg.topic = \"INSERT INTO monitoring (main_id, mp_id, action, time_taken, time_input) VALUES ('\" \n                + main_id + \"', '\"\n                + mp_id + \"', '\"\n                + action + \"', \"\n                + elapsed_time + \", '\"\n                + time_input + \"');\";\n}\n\n\n\n\n\n// Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 400,
        "wires": [
            [
                "fa2e4e15793cf74c"
            ]
        ]
    }
]